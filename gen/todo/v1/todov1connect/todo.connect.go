// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: todo/v1/todo.proto

package todov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "todo/gen/todo/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TodoServiceName is the fully-qualified name of the TodoService service.
	TodoServiceName = "todo.v1.TodoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TodoServiceCreateTaskProcedure is the fully-qualified name of the TodoService's CreateTask RPC.
	TodoServiceCreateTaskProcedure = "/todo.v1.TodoService/CreateTask"
	// TodoServiceUpdateTaskStatusProcedure is the fully-qualified name of the TodoService's
	// UpdateTaskStatus RPC.
	TodoServiceUpdateTaskStatusProcedure = "/todo.v1.TodoService/UpdateTaskStatus"
	// TodoServiceDeleteTaskProcedure is the fully-qualified name of the TodoService's DeleteTask RPC.
	TodoServiceDeleteTaskProcedure = "/todo.v1.TodoService/DeleteTask"
	// TodoServiceGetAllTasksProcedure is the fully-qualified name of the TodoService's GetAllTasks RPC.
	TodoServiceGetAllTasksProcedure = "/todo.v1.TodoService/GetAllTasks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	todoServiceServiceDescriptor                = v1.File_todo_v1_todo_proto.Services().ByName("TodoService")
	todoServiceCreateTaskMethodDescriptor       = todoServiceServiceDescriptor.Methods().ByName("CreateTask")
	todoServiceUpdateTaskStatusMethodDescriptor = todoServiceServiceDescriptor.Methods().ByName("UpdateTaskStatus")
	todoServiceDeleteTaskMethodDescriptor       = todoServiceServiceDescriptor.Methods().ByName("DeleteTask")
	todoServiceGetAllTasksMethodDescriptor      = todoServiceServiceDescriptor.Methods().ByName("GetAllTasks")
)

// TodoServiceClient is a client for the todo.v1.TodoService service.
type TodoServiceClient interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	GetAllTasks(context.Context, *connect.Request[v1.GetAllTasksRequest]) (*connect.Response[v1.GetAllTasksResponse], error)
}

// NewTodoServiceClient constructs a client for the todo.v1.TodoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTodoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TodoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &todoServiceClient{
		createTask: connect.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+TodoServiceCreateTaskProcedure,
			connect.WithSchema(todoServiceCreateTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTaskStatus: connect.NewClient[v1.UpdateTaskStatusRequest, v1.UpdateTaskStatusResponse](
			httpClient,
			baseURL+TodoServiceUpdateTaskStatusProcedure,
			connect.WithSchema(todoServiceUpdateTaskStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteTask: connect.NewClient[v1.DeleteTaskRequest, v1.DeleteTaskResponse](
			httpClient,
			baseURL+TodoServiceDeleteTaskProcedure,
			connect.WithSchema(todoServiceDeleteTaskMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAllTasks: connect.NewClient[v1.GetAllTasksRequest, v1.GetAllTasksResponse](
			httpClient,
			baseURL+TodoServiceGetAllTasksProcedure,
			connect.WithSchema(todoServiceGetAllTasksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// todoServiceClient implements TodoServiceClient.
type todoServiceClient struct {
	createTask       *connect.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	updateTaskStatus *connect.Client[v1.UpdateTaskStatusRequest, v1.UpdateTaskStatusResponse]
	deleteTask       *connect.Client[v1.DeleteTaskRequest, v1.DeleteTaskResponse]
	getAllTasks      *connect.Client[v1.GetAllTasksRequest, v1.GetAllTasksResponse]
}

// CreateTask calls todo.v1.TodoService.CreateTask.
func (c *todoServiceClient) CreateTask(ctx context.Context, req *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// UpdateTaskStatus calls todo.v1.TodoService.UpdateTaskStatus.
func (c *todoServiceClient) UpdateTaskStatus(ctx context.Context, req *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error) {
	return c.updateTaskStatus.CallUnary(ctx, req)
}

// DeleteTask calls todo.v1.TodoService.DeleteTask.
func (c *todoServiceClient) DeleteTask(ctx context.Context, req *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return c.deleteTask.CallUnary(ctx, req)
}

// GetAllTasks calls todo.v1.TodoService.GetAllTasks.
func (c *todoServiceClient) GetAllTasks(ctx context.Context, req *connect.Request[v1.GetAllTasksRequest]) (*connect.Response[v1.GetAllTasksResponse], error) {
	return c.getAllTasks.CallUnary(ctx, req)
}

// TodoServiceHandler is an implementation of the todo.v1.TodoService service.
type TodoServiceHandler interface {
	CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error)
	UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error)
	DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error)
	GetAllTasks(context.Context, *connect.Request[v1.GetAllTasksRequest]) (*connect.Response[v1.GetAllTasksResponse], error)
}

// NewTodoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTodoServiceHandler(svc TodoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	todoServiceCreateTaskHandler := connect.NewUnaryHandler(
		TodoServiceCreateTaskProcedure,
		svc.CreateTask,
		connect.WithSchema(todoServiceCreateTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceUpdateTaskStatusHandler := connect.NewUnaryHandler(
		TodoServiceUpdateTaskStatusProcedure,
		svc.UpdateTaskStatus,
		connect.WithSchema(todoServiceUpdateTaskStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceDeleteTaskHandler := connect.NewUnaryHandler(
		TodoServiceDeleteTaskProcedure,
		svc.DeleteTask,
		connect.WithSchema(todoServiceDeleteTaskMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	todoServiceGetAllTasksHandler := connect.NewUnaryHandler(
		TodoServiceGetAllTasksProcedure,
		svc.GetAllTasks,
		connect.WithSchema(todoServiceGetAllTasksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/todo.v1.TodoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TodoServiceCreateTaskProcedure:
			todoServiceCreateTaskHandler.ServeHTTP(w, r)
		case TodoServiceUpdateTaskStatusProcedure:
			todoServiceUpdateTaskStatusHandler.ServeHTTP(w, r)
		case TodoServiceDeleteTaskProcedure:
			todoServiceDeleteTaskHandler.ServeHTTP(w, r)
		case TodoServiceGetAllTasksProcedure:
			todoServiceGetAllTasksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTodoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTodoServiceHandler struct{}

func (UnimplementedTodoServiceHandler) CreateTask(context.Context, *connect.Request[v1.CreateTaskRequest]) (*connect.Response[v1.CreateTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.CreateTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) UpdateTaskStatus(context.Context, *connect.Request[v1.UpdateTaskStatusRequest]) (*connect.Response[v1.UpdateTaskStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.UpdateTaskStatus is not implemented"))
}

func (UnimplementedTodoServiceHandler) DeleteTask(context.Context, *connect.Request[v1.DeleteTaskRequest]) (*connect.Response[v1.DeleteTaskResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.DeleteTask is not implemented"))
}

func (UnimplementedTodoServiceHandler) GetAllTasks(context.Context, *connect.Request[v1.GetAllTasksRequest]) (*connect.Response[v1.GetAllTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todo.v1.TodoService.GetAllTasks is not implemented"))
}
